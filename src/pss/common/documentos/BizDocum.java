package pss.common.documentos;import java.util.Date;import pss.common.documentos.docElectronico.BizDocElectronico;import pss.common.documentos.docEmail.BizDocEmail;import pss.common.documentos.docLocal.BizDocLocal;import pss.common.documentos.hitos.BizHito;import pss.common.documentos.tipos.BizDocFisicoTipo;import pss.common.security.BizUsuario;import pss.core.services.fields.JDateTime;import pss.core.services.fields.JLong;import pss.core.services.fields.JString;import pss.core.services.records.JRecord;import pss.core.services.records.JRecords;import pss.core.tools.JExcepcion;import pss.core.tools.JTools;public class BizDocum extends JRecord  {  private JLong pIddoc = new JLong();  private JString pTipoDoc = new JString();  private JString pCompany = new JString();  private JString pTitulo = new JString();  private JDateTime pFecha = new JDateTime();	private JString pUsuario = new JString();	private JLong pPlantilla = new JLong();	private JLong pIdDocPadre = new JLong();	private JString pSourceTipo = new JString();	private JLong pSourceCodigo = new JLong();  private JString pDescrTipoDoc = new JString() {  	public void preset() throws Exception {  		setValue(getDescrTipoDoc());  	}  };  private BizDocumento documento;//////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Getter & Setters methods//////////////////////////////////////////////////////////////////////////////////////////////////////////////////   public void setObjDocumento(BizDocumento value) throws Exception { this.documento=value;  }  public void setIddoc(long zValue) throws Exception {    pIddoc.setValue(zValue);  }  public long getIddoc() throws Exception {     return pIddoc.getValue();  }  public void setTipoDoc(String zValue) throws Exception {    pTipoDoc.setValue(zValue);  }  public String getTipoDoc() throws Exception {     return pTipoDoc.getValue();  }  public String getSourceTipo() throws Exception {     return pSourceTipo.getValue();  }  public void setSourceTipo(String zValue) throws Exception {    pSourceTipo.setValue(zValue);  }  public long getSourceCodigo() throws Exception {     return pSourceCodigo.getValue();  }  public void setSourceCodigo(long zValue) throws Exception {    pSourceCodigo.setValue(zValue);  }  public void setCompany(String zValue) throws Exception {    pCompany.setValue(zValue);  }  public String getCompany() throws Exception {     return pCompany.getValue();  }  public void setTitulo(String zValue) throws Exception {    pTitulo.setValue(zValue);  }  public String getTitulo() throws Exception {     return pTitulo.getValue();  }  public boolean hasTitulo() throws Exception {     return pTitulo.isNotNull();  }  public void setFecha(Date zValue) throws Exception {    pFecha.setValue(zValue);  }  public Date getFecha() throws Exception {     return pFecha.getValue();  }  public void setIddocPadre(long zValue) throws Exception {    pIdDocPadre.setValue(zValue);  }  public long getIddocPadre() throws Exception {     return pIdDocPadre.getValue();  }  public boolean hasFecha() throws Exception { return pFecha.isNotNull();  }  public boolean hasUsuario() throws Exception { return !pUsuario.isEmpty();  }  public void setPlantilla(long zValue) throws Exception {    pPlantilla.setValue(zValue);  }  	public void setUsuario(String zValue) throws Exception {		pUsuario.setValue(zValue);	}	public String getUsuario() throws Exception {		return pUsuario.getValue();	}  /**   * Constructor de la Clase   */  public BizDocum() throws Exception {  }  public void createProperties() throws Exception {    this.addItem( "id_doc", pIddoc );    this.addItem( "tipo_doc", pTipoDoc );    this.addItem( "company", pCompany );    this.addItem( "titulo", pTitulo );    this.addItem( "fecha", pFecha );        this.addItem( "usuario", pUsuario);    this.addItem( "descr_tipodoc", pDescrTipoDoc);    this.addItem( "plantilla", pPlantilla);    this.addItem( "id_doc_padre", pIdDocPadre);    this.addItem( "source_tipo", pSourceTipo);    this.addItem( "source_codigo", pSourceCodigo);  }  /**   * Adds the fixed object properties   */  public void createFixedProperties() throws Exception {    this.addFixedItem( KEY, "id_doc", "Id",  false, false, 18 );    this.addFixedItem( FIELD, "tipo_doc", "Tipo Documento ID", true, true, 10 );    this.addFixedItem( FIELD, "company", "Company", true, true, 15 );    this.addFixedItem( FIELD, "titulo", "Titulo", true, false, 200 );    this.addFixedItem( FIELD, "fecha", "Fecha", true, true, 20 );    this.addFixedItem( FIELD, "usuario", "Usuario", true, false, 15 );    this.addFixedItem( FIELD, "plantilla", "Plantilla", true, false, 18 );    this.addFixedItem( FIELD, "id_doc_padre", "Id Doc Padre", true, false, 18 );    this.addFixedItem( FIELD, "source_tipo", "Tipo Source", true, false, 5 );    this.addFixedItem( FIELD, "source_codigo", "Codigo Source", true, false, 18 );    this.addFixedItem( VIRTUAL, "descr_tipodoc", "Tipo Documento", true, true, 50 );  }  /**   * Returns the table name   */  public String GetTable() { return "DOC_DOCUM"; }//////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Functionality methods//////////////////////////////////////////////////////////////////////////////////////////////////////////////////  /**   * Default Read() method   */  public boolean read( long zIddoc ) throws Exception {     addFilter( "id_doc",  zIddoc );     return read();   }     public void refresh() throws Exception {  	this.read(this.getIddoc());  	this.documento=null;  }     public BizDocElectronico getObjDocElectronico() throws Exception {  	return (BizDocElectronico)this.getObjDocumento();  }////  public BizDocCorreoExterno getObjDocCorreExterno() throws Exception {//  	return (BizDocCorreoExterno)this.getObjDocumento();//  }  public BizDocEmail getObjDocEMail() throws Exception {  	return (BizDocEmail)this.getObjDocumento();  }		public BizDocumento getObjDocumento() throws Exception {  	if (this.documento!=null) return this.documento;  	BizDocumento doc = BizDocum.virtualCreate(this.getTipoDoc());  	if (doc==null) return null;  	doc.dontThrowException(true);  	doc.setObjDocum(this);  	doc.Read(this.getIddoc());  	return (this.documento=doc);  }    public static BizDocumento virtualCreate(String type) throws Exception {  	return (BizUsuario.getUsr().getObjBusiness().documentBizCreate(type));  }  public boolean isPrinteable() throws Exception {  	return hasPlantilla() || isCorreo();  }  public boolean isLocal() throws Exception {  	return this.getTipoDoc().equals(BizDocFisicoTipo.LOCAL);  }  public boolean isCorreo() throws Exception {  	return this.getTipoDoc().equals(BizDocFisicoTipo.CORREO);  }//  public boolean isCorreoExterno() throws Exception {//  	return this.getTipoDoc().equals(BizDocFisicoTipo.CORREO_EXT);//  }  public boolean isElectronico() throws Exception {  	return this.getTipoDoc().equals(BizDocFisicoTipo.ELECT);  }  public boolean isType(String type) throws Exception {  	return this.getTipoDoc().equals(type);  }//	public String getDescrResponsable() throws Exception {//		return getObjResponsable().GetDescrip();//	}      public String getDescrTipoDoc() throws Exception {  	return BizDocFisicoTipo.getDescrTipo(pTipoDoc.getValue());  }////  public  String verDocumento(  boolean paraImpresion  ) throws Exception {//  	return getObjDocumento().verDocumento( paraImpresion );//  }  	private String convertToFileName(String id) {		id = id.replaceAll("-", "_");		id = id.replaceAll("/", "_");		id = id.replaceAll(":", "_");		return id.toLowerCase();	}	public String getHtmlFilename() throws Exception {		return "doc"+convertToFileName(this.toString())+".html";	}		public String getPdfFilename() throws Exception {		return "doc"+convertToFileName(JTools.LPad(""+getIddoc(),10,"0"))+".pdf";	}	public String getPngFilename() throws Exception {		return "doc"+convertToFileName(JTools.LPad(""+getIddoc(),10,"0"))+".png";	}  public String getXmlFilename() throws Exception {  	return "doc_"+convertToFileName(JTools.LPad(""+getIddoc(),10,"0"))+".xml";  }	 	public String getImagePaginaFilename(long pagina) throws Exception {		return "doc"+convertToFileName(JTools.LPad(""+getIddoc(),10,"0"))+"_"+pagina+".jpg";	}	@Override	public void processUpdate() throws Exception {		super.processUpdate();		  	BizHito hito = new BizHito();  	hito.setObservaciones("Modificado");	  hito.setIddoc(this.getIddoc());	  hito.setTipoHito(BizHito.MODIFICAR);	  hito.processInsert();	}			@Override	public void processInsert() throws Exception {		if (!this.hasFecha())			this.setFecha(BizUsuario.getUsr().todayGMT());		if (!this.hasUsuario())			this.setUsuario(BizUsuario.getUsr().GetUsuario());		this.insert();		this.pIddoc.setValue(this.getIdentity("id_doc"));//		BizHitoCrear hito = new BizHitoCrear();//		hito.setIddoc(this.getIddoc());//		hito.setObservaciones("Creacion del Documento");//		hito.processInsert();		}	  public JRecords<BizHito> getDocHitos() throws Exception {  	JRecords<BizHito> recs = new JRecords<BizHito>(BizHito.class);  	recs.addFilter("id_doc", this.getIddoc());  	recs.readAll();  	return recs;  }	@Override	public void processDelete() throws Exception {		this.getDocHitos().processDeleteAll();		this.delete();	}		public JRecords<BizDocum> getDocHijos()  throws Exception { 		JRecords<BizDocum> recs = new JRecords<BizDocum>(BizDocum.class); 		recs.addFilter("id_doc_padre", this.getIddoc()); 		recs.readAll();		return recs; 	}  	//	public void generateTicket() throws Exception {//		JPrintGen g = BizConsola.getConsola().getPrintTicketGen("TICKET_DOC");//		if (g == null)//			return;//		g.setFieldInterface(this);//		g.startRecorder();//		g.generate(JFieldSetWins.REPORT_HEADER, this);//		g.generate(JFieldSetWins.SECTOR_MAIN, this);//		g.generate(JFieldSetWins.REPORT_FOOTER, this);//		g.endRecorder();//		g.print();//	}////	@Override//	public Object getField(JFieldReq req) throws Exception {//		JRecord r = (JRecord) req.getSource1();//		JObject field = r.getPropDeep(req.id);//		return field.asObject();//	}	//	private BizUsuario responsable;//	public BizUsuario getObjResponsable() throws Exception {//		if (responsable != null) return responsable;//		BizUsuario p = new BizUsuario();//		p.Read(getIdresponsable());//		return (responsable = p);//	}	  public long getPlantilla() throws Exception {     	return this.pPlantilla.getValue();    }	  public boolean hasPlantilla() throws Exception {     	return this.pPlantilla.getValue()!=0;    }	public static final String SOURCE_ERP_CRM = "CRM";	public JRecord findDocumentSource() throws Exception {		IDocumentSource source=null;		if (this.getSourceTipo().equals(BizDocum.SOURCE_ERP_CRM)) source=(IDocumentSource)Class.forName("pss.erp.crm.documents.crmDoc.BizCrmDoc").newInstance();		if (source==null) JExcepcion.SendError("Source desconocido");		return source.createSource(this);	}		public boolean hasSource() throws Exception {		return !this.getSourceTipo().isEmpty();	}	public boolean hasPadre() throws Exception {		return this.getIddocPadre()!=0L;	}	private BizDocum docPadre;  public BizDocum getObjDocPadre() throws Exception {  	if (this.docPadre!=null) return this.docPadre;  	BizDocum d = new BizDocum();  	d.read(this.pIdDocPadre.getValue());  	return (this.docPadre=d);  }}